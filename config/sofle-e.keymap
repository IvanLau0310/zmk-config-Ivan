/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define BASE 0
#define LOWER 1
#define RAISE 2
#define MICRO 3
#define ADJUST 4

&mt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
    quick-tap-ms = <200>;
    require-prior-idle-ms = <100>;

    //retro-tap;
};

/ {
    // Activate ADJUST layer by pressing raise and lower

    conditional_layers {
        compatible = "zmk,conditional-layers";

        adjust_layer {
            if-layers = <1 1>;
            then-layer = <1>;
        };
    };

    combos {
        compatible = "zmk,combos";

        JK2Layer3 {
            bindings = <&mo 0>;
            key-positions = <36 37>;
        };

        DF2Space {
            bindings = <&kp SPACE>;
            key-positions = <32 33>;
        };
    };

    behaviors {
        btclr: btclr {
            compatible = "zmk,behavior-mod-morph";
            label = "Clear blu profile mod-morph";
            bindings = <&none>, <&bt BT_CLR>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LSFT|MOD_LGUI|MOD_LALT|MOD_RSFT|MOD_RCTL|MOD_RALT|MOD_RGUI)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "Default";
            bindings = <
&kp ESC                   &kp GRAVE         &kp N1        &kp N2            &kp N3       &kp N4         &kp N5          &kp N6   &kp N7          &kp N8            &kp N9        &kp N0          &kp MINUS      &kp EQUAL
&kp LG(LC(W))             &kp TAB           &kp Q         &kp W             &kp E        &kp R          &kp T           &kp Y    &kp U           &kp I             &kp O         &kp P           &kp LBKT       &kp RBKT
&mt LG(LC(A)) LEFT_SHIFT  &kp CAPS          &mt LSHFT A   &kp S             &mt LG(D) D  &kp F          &kp G           &kp H    &kp J           &kp K             &kp L         &mt RSHFT SEMI  &kp SQT        &kp RET
&kp LEFT_COMMAND          &kp LSHFT         &kp Z         &kp X             &kp C        &kp V          &kp B           &kp N    &kp M           &kp COMMA         &kp DOT       &kp FSLH        &kp RSHFT      &kp BACKSPACE
                          &kp LEFT_CONTROL  &kp LEFT_ALT  &kp LEFT_COMMAND  &lt 1 SPACE  &kp BACKSPACE                           &kp LEFT_ARROW  &lt 1 DOWN_ARROW  &kp UP_ARROW  &kp RIGHT       &kp LG(LC(A))
                                            &kp UP        &kp LEFT          &kp DOWN     &kp RIGHT      &kp C_MUTE      &kp INS                  &kp END           &kp PG_DN     &kp HOME        &kp PG_UP
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOL_UP C_VOL_DN>,
                <&inc_dec_kp C_BRI_INC C_BRI_DEC>;
        };

        layer_1 {
            bindings = <
&trans  &trans  &kp F1  &kp F2  &kp F3          &kp F4  &kp F5      &kp F6  &kp F7            &kp F8             &kp F9          &kp F10          &kp F11         &kp F12
&trans  &trans  &trans  &trans  &trans          &trans  &trans      &trans  &trans            &trans             &trans          &trans           &trans          &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans      &trans  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp UP_ARROW    &trans
&trans  &trans  &trans  &trans  &bt BT_CLR_ALL  &trans  &trans      &trans  &trans            &trans             &trans          &kp LEFT_ARROW   &kp DOWN_ARROW  &kp RIGHT_ARROW
        &trans  &trans  &trans  &trans          &trans                      &trans            &trans             &trans          &kp PIPE         &trans
                &trans  &trans  &trans          &trans  &trans      &trans                    &trans             &trans          &trans           &trans
            >;

            sensor-bindings =
                <&inc_dec_kp PAGE_UP PAGE_DOWN>,
                <&inc_dec_kp PAGE_UP PAGE_DOWN>;
        };
    };
};
